The perils of temporary object lifetimes in C++
===============================================

Th other day my junior colleague asked me to help him troubleshoot a failing unit test: the
actual value of a protocol buffer string field did not match[^1] the expected value, and he
couldn't understand why. Unfortunately, I'm not allowed to share the code, but it can be
summarized using this contrived example:

```cpp
#include <iostream>
#include <string>

std::string foo() {
    return "Hello, World!";
}

int main() {
    std::string_view bar = {foo()};
    std::cout << bar << std::endl;

    return 0;
}
```

A seasoned C++ programmer will immediately spot the problem, but someone who have only used a
memory-safe language like Java or Python in the past will be baffled why a seemingly trivial
program above may or may not print the string `"Hello, World!\n"` depending on the chosen level
of optimizations, the version of a compiler, operating system, etc.

The issue, of course, is that `foo()` returns a _temporary_ object whose lifetime ends too early:

* unlike `std::string`, `std::string_view` does _not_ allocate and own a dynamic array of `char`;
  instead, it _references_ a contiguous sequence of `char` somewhere in main memory. In this case,
  that sequence is a dynamic array owned by the temporary `std::string` object

* this temporary object is destroyed right after the initialization of a `std::string_view` value,
  i.e. the newly constructed `std::string_view` object immediately points to a memory region that
  has already been freed[^2] and, potentially, reused for something else

How would a junior programmer know they made a mistake like that? Would the compiler be able to help?
I tried the latest versions of both clang++ and g++ available in Arch Linux, but neither complained
about the code above:

```shell
$ clang++ --version
clang version 16.0.6
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
$ clang++ example.cpp -o example -Wall -Werror -pedantic
$

$ g++ --version
g++ (GCC) 13.2.1 20230801
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ g++ example.cpp -o example -Wall -Werror -pedantic -std=c++17
$
```

Interestingly, replacing `std::string_view bar = {foo()};` with `std::string_view bar = foo();` makes
the difference, and clang++ is now able to generate a warning (that can be turned into an error if you
compile the code with `-Werror`):

```shell
$ clang++ example.cpp -o example -Wall -Werror -pedantic
example.cpp:9:28: error: object backing the pointer will be destroyed at the end of the full-expression [-Werror,-Wdangling-gsl]
    std::string_view bar = foo();
                           ^~~~~
1 error generated.
```

[C++ initialization rules](https://en.cppreference.com/w/cpp/language/initialization) are mind-boggling, but
it looks like list-initialization somehow throws clang++ off, while diagnostics in g++ are even weaker.

Not all hope is lost, though. While it might be hard to detect this issue at _compile_ time, it is certainly
possible to do so at _runtime_. [AddressSanitizer](https://github.com/google/sanitizers/wiki/AddressSanitizer)
is a huge step forward and truly is a must have if you write C/C++ these days. Passing `-fsanitize=address` when
compiling binaries using clang or GCC will add the necessary instrumentation to detect such errors, for example:

```shell
$ clang++ example.cpp -o example -Wall -Werror -pedantic -fsanitize=address -Og
$ ./example
=================================================================
==736315==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7f02cc000030 at pc 0x5593e0172d75 bp 0x7ffd78fc77b0 sp 0x7ffd78fc6f70
READ of size 13 at 0x7f02cc000030 thread T0
    #0 0x5593e0172d74 in __interceptor_fwrite.part.0 asan_interceptors.cpp.o
    #1 0x7f02ce1489e4 in std::basic_streambuf<char, std::char_traits<char>>::sputn(char const*, long) /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/s
treambuf:458:28
    #2 0x7f02ce1489e4 in void std::__ostream_write<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>>&, char const*, long) /usr/src/debug/gcc/gcc
-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream_insert.h:53:52
    #3 0x7f02ce1489e4 in std::basic_ostream<char, std::char_traits<char>>& std::__ostream_insert<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char
>>&, char const*, long) /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream_insert.h:104:18
    #4 0x5593e025a5a4 in main (/home/malor/sandbox/example+0x1575a4) (BuildId: 45fbcf1dea3ac1d2ea6dcc5217e757f7c29fc018)
    #5 0x7f02cdd58ccf  (/usr/lib/libc.so.6+0x27ccf) (BuildId: 8bfe03f6bf9b6a6e2591babd0bbc266837d8f658)
    #6 0x7f02cdd58d89 in __libc_start_main (/usr/lib/libc.so.6+0x27d89) (BuildId: 8bfe03f6bf9b6a6e2591babd0bbc266837d8f658)
    #7 0x5593e01210d4 in _start (/home/malor/sandbox/example+0x1e0d4) (BuildId: 45fbcf1dea3ac1d2ea6dcc5217e757f7c29fc018)

Address 0x7f02cc000030 is located in stack of thread T0 at offset 48 in frame
    #0 0x5593e025a47f in main (/home/malor/sandbox/example+0x15747f) (BuildId: 45fbcf1dea3ac1d2ea6dcc5217e757f7c29fc018)

  This frame has 1 object(s):
    [32, 64) 'ref.tmp' <== Memory access at offset 48 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-scope asan_interceptors.cpp.o in __interceptor_fwrite.part.0
```

The catch is that the faulty code path must be triggered in order for AddressSanitizer to do its job.
Hey, but that's why you should always write tests!

It _is_ amazing to me how easy it is to make a mistake like that in C++ compared to programming languages
with automatic memory management, or programming languages like Rust that can detect those at _compile_ time.
This also reminds me how old I am: we now have a whole new generation of programmers for whom automatic memory
management is the norm, and those pesky C++ object lifetime rules are some anachronisms.

[^1]: In addition to a test failure, there was a warning about protocol buffer string serialization detecting
an invalid UTF-8 sequence. When I pointed that out to my colleague (to hint that we were reading garbage memory
somehow), it didn't trigger any reaction. I now realize that we are living in the world where UTF-8 has officially
won and it is now universally associated with the term Unicode or even "text" -- no one cares what encoding
is used and how it works, as it's all UTF-8 these days.

[^2]: Implementations of `std::string` in modern compilers will likely put a short string like that on the _stack_,
but even if _heap_ is not used, the outcome is the same -- `std::string_view` references memory that can already be
used for something else.
